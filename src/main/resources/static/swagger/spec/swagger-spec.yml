swagger: '2.0'
info:
  title: Logbook API
  description: |
    The **logbook-api** is responsible for log messages and alerts
    processing. The service is purely data-driven, provides endpoints for
    retrieving data by the following criteria:
      * subsystem
      * severity
      * time window
      * user
      * status
  version: "1.0.0"

# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /logbook
produces:
  - application/json
paths:
  /logs:
    post:
      summary: Create log message
      parameters:
        - name: logMessage
          in: body
          required: true
          schema:
            $ref: '#/definitions/LogMessage'
      tags:
        - Logs
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Log message has been created
          schema:
            $ref: '#/definitions/LogMessage'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Service error
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Query log message
      description: |
        Query log messages by their properties
      parameters:
        - name: subsystemId
          in: query
          type: string
          description: Subsystem id
        - name: severity
          in: query
          type: string
          enum:
            - DEBUG
            - INFO
            - WARNING
            - ERROR
            - CRITICAL
          default: CRITICAL
          required: false
        - name: since
          in: query
          type: string
          format: date-time
          required: false
        - name: until
          in: query
          type: string
          format: date-time
          required: false
        - name: pageSize
          in: query
          type: integer
          required: false
          default: 50
          description: |
            The results will be provided in chunks. This parameters represents the chunk size
      tags:
        - Logs
      produces:
        - application/json
      responses:
        200:
          description: |
            A list of log messages which fulfill the requirements
          schema:
            type: array
            items:
                $ref: '#/definitions/LogMessage'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Service error
          schema:
            $ref: '#/definitions/Error'

  /logs/{logId}:
    get:
      summary: Single log message
      description: Retrieve a log message by id
      parameters:
        - name: logId
          in: path
          type: string
          description: Log message identifier
          required: true
      tags:
        - Logs
      produces:
        - application/json
      responses:
        200:
          description: Log message
          schema:
            $ref: '#/definitions/LogMessage'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            type: string
        500:
          description: Service error
          schema:
            $ref: '#/definitions/Error'

  /alerts:
    post:
      summary: Create alert
      operationId: createAlert
      parameters:
        - name: alert
          in: body
          required: true
          schema:
            $ref: '#/definitions/Alert'
      tags:
        - Alerts
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Alert has been created
          schema:
            $ref: '#/definitions/Alert'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Service error
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Query alerts
      description: |
        Query alerts by their properties
      parameters:
        - name: subsystemId
          in: query
          type: string
          description: Subsystem id
        - name: severity
          in: query
          type: string
          enum:
            - WARNING
            - CRITICAL
          default: CRITICAL
          required: false
        - name: since
          in: query
          type: string
          format: date-time
          required: false
        - name: until
          in: query
          type: string
          format: date-time
          required: false
        - name: state
          in: query
          type: string
          enum:
            - NEW
            - ACKNOWLEDGED
            - RESOLVED
          default: NEW
          required: false
        - name: userId
          in: query
          type: string
          required: false
        - name: pageSize
          in: query
          type: integer
          required: false
          default: 50
          description: |
            The results will be provided in chunks. This parameters represents the chunk size
        - name: pageIndex
          in: query
          type: integer
          required: false
          default: 0
      tags:
        - Alerts
      produces:
        - application/json
      responses:
        200:
          description: Alerts
          schema:
            type: array
            items:
                $ref: '#/definitions/Alert'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Service error
          schema:
            $ref: '#/definitions/Error'

  /alerts/{alertId}:
    get:
      summary: Single alert
      description: Retrieve alert by id
      parameters:
        - name: alertId
          in: path
          type: string
          description: Alert identifier
          required: true
      tags:
        - Alerts
      produces:
        - application/json
      responses:
        200:
          description: Alert
          schema:
            $ref: '#/definitions/Alert'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            type: string
        500:
          description: Service error
          schema:
            $ref: '#/definitions/Error'

definitions:
  LogMessage:
    type: object
    properties:
      logId:
        type: integer
        format: int64
      message:
        type: string
      severity:
        type: string
        enum:
          - DEBUG
          - INFO
          - WARNING
          - ERROR
          - CRITICAL
      subsystem:
        type: string
      createdOn:
        type: string
        format: date-time
      downloadedOn:
        type: string
        format: date-time


  Alert:
    type: object
    properties:
      alertId:
        type: integer
        format: int64
      message:
        type: string
      owner:
        type: integer
        format: int64
      state:
        type: string
        enum:
          - NEW
          - ACKNOWLEDGED
          - RESOLVED
      createdOn:
        type: string
        format: date-time
      notes:
        type: array
        items:
          $ref: '#/definitions/Note'
      severity:
        type: string
        enum:
          - WARNING
          - CRITICAL
      subsystem:
        type: string
      transitions:
        type: array
        items:
          $ref: '#/definitions/Transition'


  Note:
    type: object
    properties:
      message:
        type: string
      author:
        type: integer
        format: int64
      createdOn:
        type: string
        format: date-time

  Transition:
    type: object
    properties:
      from:
        type: string
        enum:
          - NEW
          - ACKNOWLEDGED
          - RESOLVED
      to:
        type: string
        enum:
          - NEW
          - ACKNOWLEDGED
          - RESOLVED
      author:
        type: integer
        format: int64
      createdOn:
        type: string
        format: date-time

  Error:
    type: object
    properties:
      message:
        type: string